{
    "patches": [
        {
            "label": "2025-10-27_01-42-01",
            "content": "@@ -4,3015 +4,1901 @@\n ss P\n-essoa:%0A%09def __init__(self, nome: str, dinheiro: float):%0A%09%09self.nome = nome%0A%09%09self.dinheiro = float(dinheiro)%0A%0A%09def pagar(self, valor: float) -%3E float:%0A%09%09pago = min(self.dinheiro, float(valor))%0A%09%09self.dinheiro -= pago%0A%09%09return pago%0A%0A%0Aclass Motorista(Pessoa):%0A%09pass%0A%0A%0Aclass Passageiro(Pessoa):%0A%09pass%0A%0A%0Aclass Moto:%0A%09CUSTO_POR_KM = 1.0%0A%0A%09def __init__(self, motorista: Motorista %7C None = None):%0A%09%09self.motorista = motorista%0A%09%09self.passageiro: Passageiro %7C None = None%0A%09%09self.custo_corrida: float = 0.0%0A%0A%09def colocar_motorista(self, motorista: Motorista):%0A%09%09self.motorista = motorista%0A%0A%09def embarcar(self, passageiro: Passageiro):%0A%09%09if not self.motorista:%0A%09%09%09print(f%22N%C3%A3o %C3%A9 poss%C3%ADvel embarcar: n%C3%A3o h%C3%A1 motorista na moto.%22)%0A%09%09%09return%0A%09%09if self.passageiro is not None:%0A%09%09%09print(f%22J%C3%A1 h%C3%A1 um passageiro (%7Bself.passageiro.nome%7D) na moto.%22)%0A%09%09%09return%0A%09%09self.passageiro = passageiro%0A%09%09self.custo_corrida = 0.0%0A%09%09print(f%22%7Bpassageiro.nome%7D embarcou. Iniciando corrida (custo = R$ %7Bself.custo_corrida:.2f%7D).%22)%0A%0A%09def rodar(self, km: float):%0A%09%09if self.passageiro is None:%0A%09%09%09print(%22Nenhum passageiro a bordo. Rode apenas com passageiro para contabilizar pre%C3%A7o.%22)%0A%09%09%09return%0A%09%09if km %3C= 0:%0A%09%09%09print(%22Quilometragem inv%C3%A1lida. Deve ser %3E 0.%22)%0A%09%09%09return%0A%09%09incremento = km * self.CUSTO_POR_KM%0A%09%09self.custo_corrida += incremento%0A%09%09print(f%22Andou %7Bkm%7D km. Custo atual da corrida: R$ %7Bself.custo_corrida:.2f%7D.%22)%0A%0A%09def desembarcar(self):%0A%09%09if self.passageiro is None:%0A%09%09%09print(%22N%C3%A3o h%C3%A1 passageiro para desembarcar.%22)%0A%09%09%09return%0A%09%09if not self.motorista:%0A%09%09%09# regra: passageiro s%C3%B3 pode subir se tiver motorista, mas checamos por seguran%C3%A7a%0A%09%09%09print(%22Erro: n%C3%A3o h%C3%A1 motorista para receber o pagamento.%22)%0A%09%09%09return%0A%0A%09%09tarifa = float(self.custo_corrida)%0A%09%09pago = self.passageiro.pagar(tarifa)%0A%0A%09%09# Motorista sempre recebe o valor completo da corrida (complemento vindo do 'Uber')%0A%09%09self.motorista.dinheiro += tarifa%0A%0A%09%09falta = tarifa - pago%0A%09%09print(f%22%7Bself.passageiro.nome%7D desembarcou. Tarifa: R$ %7Btarifa:.2f%7D.%22)%0A%09%09print(f%22Pagou ao motorista: R$ %7Bpago:.2f%7D.%22, end=%22 %22)%0A%09%09if falta %3E 0:%0A%09%09%09print(f%22Faltaram R$ %7Bfalta:.2f%7D %E2%80%94 complemento pago pelo Uber.%22)%0A%09%09else:%0A%09%09%09print()%0A%0A%09%09print(f%22Saldo %7Bself.passageiro.nome%7D: R$ %7Bself.passageiro.dinheiro:.2f%7D%22)%0A%09%09print(f%22Saldo %7Bself.motorista.nome%7D: R$ %7Bself.motorista.dinheiro:.2f%7D (recebeu R$ %7Btarifa:.2f%7D)%22)%0A%0A%09%09# Limpar estado da moto%0A%09%09self.passageiro = None%0A%09%09self.custo_corrida = 0.0%0A%0A%0Aif __name__ == %22__main__%22:%0A%09# Exemplo 1: passageiro com dinheiro suficiente%0A%09motorista = Motorista(%22Jo%C3%A3o%22, 20.0)%0A%09passageiro = Passageiro(%22Maria%22, 50.0)%0A%09moto = Moto(motorista)%0A%0A%09print(%22--- Exemplo 1: passageiro com saldo suficiente ---%22)%0A%09moto.embarcar(passageiro)%0A%09moto.rodar(12)  # 12 km -%3E R$ 12%0A%09moto.desembarcar()%0A%09print()%0A%0A%09# Exemplo 2: passageiro sem dinheiro suficiente%0A%09motorista2 = Motorista(%22Carlos%22, 5.0)%0A%09passageiro2 = Passageiro(%22Ana%22, 3.0)%0A%09moto2 = Moto(motorista2)%0A%0A%09print(%22--- Exemplo 2: passageiro com pouco dinheiro ---%22)%0A%09moto2.embarcar(passageiro2)%0A%09moto2.rodar(10)  # 10 km -%3E R$ 10%0A%09moto2.desembarcar()\n+assageiro:%0A    def _init_(self, nome: str, age: int):%0A        self.__nome = nome%0A        self.__age = age%0A%0A    def _str_(self):%0A        return f%22%7Bself._nome%7D:%7Bself._age%7D%22%0A        %0A    def getAge(self):%0A        return self.__age%0A%0A    def getName(self):%0A        return self.__nome%0A%0A    def toString(self) -%3E str:%0A        return f%22%7Bself._nome%7D:%7Bself._age%7D%22%0A%0A%0Aclass Moto:%0A    def _init_(self, potencia: int = 1):%0A        self.__potencia = potencia%0A        self.__tempo: int = 0%0A        self.__pessoa: Passageiro = None %0A%0A    def add_pessoa(self, pessoa: Pessoa) -%3E bool:%0A        if self.__pessoa != None:%0A            print(%22fail: busy motorcycle%22)%0A            return False%0A        self.__pessoa = pessoa%0A        return True%0A%0A    def remover(self) -%3E Pessoa %7C None:        %0A        aux = self.__pessoa%0A        self.__pessoa = None       %0A        return aux          %0A%0A    def comprar_tempo(self, tempo: int):%0A        self.__tempo += tempo%0A%0A    def dirigir(self, tempo: int):%0A        if self.__tempo == 0:%0A            print(%22fail: buy time first%22)%0A            return %0A%0A        elif self.__pessoa == None:%0A            print(%22fail: empty motorcycle%22)%0A%0A        elif self.__tempo == 0:%0A            print(%22fail: buy time first%22)%0A            return %0A%0A        elif self.__pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A%0A        elif self.__tempo %3C tempo:%0A            print(f%22fail: time finished after %7Bself.__tempo%7D minutes%22)%0A            self.__tempo = 0%0A%0A        elif self.__tempo %3E= tempo:%0A             self.__tempo -= tempo%0A%0A    def buzinar(self) -%3E str:           %0A        som: str = %22P%22                   %0A        for i in range(self.__potencia): %0A            som += %22e%22%0A        som += %22m%22%0A        return som%0A%0A    def _str_(self):%0A        pessoa = %22empty%22 if self._pessoa is None else str(self._pessoa)%0A        return f%22power:%7Bself._potencia%7D, time:%7Bself._tempo%7D, person:(%7Bpessoa%7D)%22%0A %0A%0A\n",
            "lines": "73"
        },
        {
            "label": "2025-10-27_23-08-03",
            "content": "@@ -1,2518 +1,3018 @@\n-from sklearn.cluster import kmeans_plusplus%0A%0A%0Aclass Pessoa:%0A    def __init__(self):%0A        self.__nome: str = %22%22%0A        self.__dinheiro: float = 0.0%0A    def __str__(self):%0A        return f%22Nome: %7Bself.__nome%7D, Dinheiro: R$ %7Bself.__dinheiro:.2f%7D%22%0A    def getNome(self):%0A        return self.__nome%0A    def getDinheiro(self):%0A        return self.__dinheiro%0A    def setDinheiro(self,valor: float):%0A        self.__dinheiro = valor%0Aclass Moto:%0A    def __init__(self):%0A        self.__custo = 0%0A        self.__motorista: Pessoa = None%0A        self.__passageiro: Pessoa = None%0A    def setDriver(self,nome: str, dinheiro: float):%0A        self.__motorista = Pessoa(nome, dinheiro)%0A    def setPass(self,nome: str, dinheiro: float):%0A        if self.__motorista is None:%0A            print(%22fail:no driver%22)%0A            return False%0A        self.__passageiro = Pessoa(nome, dinheiro)%0A        self.__custo = 0%0A        return True%0A    def drive(self, distancia: float):%0A        if self.__passageiro is None:%0A            print(%22fail:no passenger%22)%0A            return%0A        self.__custo += distancia%0A    def leavePass(self):%0A        if self.__passageiro is None:%0A            print(%22fail:no passenger%22)%0A            return%0A        paga = min(self.__custo, self.__passageiro.getDinheiro())%0A        self.__passageiro.setDinheiro(self.__passageiro.getDinheiro() - paga)%0A        self.__motorista.setDinheiro(self.__motorista.getDinheiro() + paga)%0A        print(f%22%7Bself.__passageiro.getNome()%7D:%7Bpaga%7D left%22)%0A        self.__passageiro = None%0A        self.__custo = 0%0A    def __str__(self):%0A        driver_str = str(self.__motorista) if self.__motorista else %22No driver%22%0A        pass_str = str(self.__passageiro) if self.__passageiro else %22No passenger%22%0A        return f%22Driver: %7Bdriver_str%7D%5CnPassenger: %7Bpass_str%7D%5CnCost: %7Bself.__custo%7D%22%0Adef main():%0A    moto = Moto()%0A    while True:%0A        line = input()%0A        parts = line.split()%0A        cmd = parts%5B0%5D%0A        if cmd == %22end%22:%0A            break%0A        elif cmd == %22init%22:%0A            nome = parts%5B1%5D%0A            dinheiro = float(parts%5B2%5D)%0A            moto.setDriver(nome, dinheiro)%0A        elif cmd == %22show%22:%0A            print(moto)%0A        elif cmd == %22in%22:%0A            nome = parts%5B1%5D%0A            dinheiro = float(parts%5B2%5D)%0A            moto.setPass(nome, dinheiro)%0A        elif cmd == %22drive%22:%0A            distancia = float(parts%5B1%5D)%0A            moto.drive(distancia)%0A        elif cmd == %22out%22:%0A            moto.leavePass()%0A        else:%0A            print(%22fail: comando invalido%22\n+class Pessoa:%0A%09def __init__(self, nome: str, dinheiro: float):%0A%09%09self.nome = nome%0A%09%09self.dinheiro = float(dinheiro)%0A%0A%09def pagar(self, valor: float) -%3E float:%0A%09%09pago = min(self.dinheiro, float(valor))%0A%09%09self.dinheiro -= pago%0A%09%09return pago%0A%0A%0Aclass Motorista(Pessoa):%0A%09pass%0A%0A%0Aclass Passageiro(Pessoa):%0A%09pass%0A%0A%0Aclass Moto:%0A%09CUSTO_POR_KM = 1.0%0A%0A%09def __init__(self, motorista: Motorista %7C None = None):%0A%09%09self.motorista = motorista%0A%09%09self.passageiro: Passageiro %7C None = None%0A%09%09self.custo_corrida: float = 0.0%0A%0A%09def colocar_motorista(self, motorista: Motorista):%0A%09%09self.motorista = motorista%0A%0A%09def embarcar(self, passageiro: Passageiro):%0A%09%09if not self.motorista:%0A%09%09%09print(f%22N%C3%A3o %C3%A9 poss%C3%ADvel embarcar: n%C3%A3o h%C3%A1 motorista na moto.%22)%0A%09%09%09return%0A%09%09if self.passageiro is not None:%0A%09%09%09print(f%22J%C3%A1 h%C3%A1 um passageiro (%7Bself.passageiro.nome%7D) na moto.%22)%0A%09%09%09return%0A%09%09self.passageiro = passageiro%0A%09%09self.custo_corrida = 0.0%0A%09%09print(f%22%7Bpassageiro.nome%7D embarcou. Iniciando corrida (custo = R$ %7Bself.custo_corrida:.2f%7D).%22)%0A%0A%09def rodar(self, km: float):%0A%09%09if self.passageiro is None:%0A%09%09%09print(%22Nenhum passageiro a bordo. Rode apenas com passageiro para contabilizar pre%C3%A7o.%22)%0A%09%09%09return%0A%09%09if km %3C= 0:%0A%09%09%09print(%22Quilometragem inv%C3%A1lida. Deve ser %3E 0.%22)%0A%09%09%09return%0A%09%09incremento = km * self.CUSTO_POR_KM%0A%09%09self.custo_corrida += incremento%0A%09%09print(f%22Andou %7Bkm%7D km. Custo atual da corrida: R$ %7Bself.custo_corrida:.2f%7D.%22)%0A%0A%09def desembarcar(self):%0A%09%09if self.passageiro is None:%0A%09%09%09print(%22N%C3%A3o h%C3%A1 passageiro para desembarcar.%22)%0A%09%09%09return%0A%09%09if not self.motorista:%0A%09%09%09# regra: passageiro s%C3%B3 pode subir se tiver motorista, mas checamos por seguran%C3%A7a%0A%09%09%09print(%22Erro: n%C3%A3o h%C3%A1 motorista para receber o pagamento.%22)%0A%09%09%09return%0A%0A%09%09tarifa = float(self.custo_corrida)%0A%09%09pago = self.passageiro.pagar(tarifa)%0A%0A%09%09# Motorista sempre recebe o valor completo da corrida (complemento vindo do 'Uber')%0A%09%09self.motorista.dinheiro += tarifa%0A%0A%09%09falta = tarifa - pago%0A%09%09print(f%22%7Bself.passageiro.nome%7D desembarcou. Tarifa: R$ %7Btarifa:.2f%7D.%22)%0A%09%09print(f%22Pagou ao motorista: R$ %7Bpago:.2f%7D.%22, end=%22 %22)%0A%09%09if falta %3E 0:%0A%09%09%09print(f%22Faltaram R$ %7Bfalta:.2f%7D %E2%80%94 complemento pago pelo Uber.%22)%0A%09%09else:%0A%09%09%09print()%0A%0A%09%09print(f%22Saldo %7Bself.passageiro.nome%7D: R$ %7Bself.passageiro.dinheiro:.2f%7D%22)%0A%09%09print(f%22Saldo %7Bself.motorista.nome%7D: R$ %7Bself.motorista.dinheiro:.2f%7D (recebeu R$ %7Btarifa:.2f%7D)%22)%0A%0A%09%09# Limpar estado da moto%0A%09%09self.passageiro = None%0A%09%09self.custo_corrida = 0.0%0A%0A%0Aif __name__ == %22__main__%22:%0A%09# Exemplo 1: passageiro com dinheiro suficiente%0A%09motorista = Motorista(%22Jo%C3%A3o%22, 20.0)%0A%09passageiro = Passageiro(%22Maria%22, 50.0)%0A%09moto = Moto(motorista)%0A%0A%09print(%22--- Exemplo 1: passageiro com saldo suficiente ---%22)%0A%09moto.embarcar(passageiro)%0A%09moto.rodar(12)  # 12 km -%3E R$ 12%0A%09moto.desembarcar()%0A%09print()%0A%0A%09# Exemplo 2: passageiro sem dinheiro suficiente%0A%09motorista2 = Motorista(%22Carlos%22, 5.0)%0A%09passageiro2 = Passageiro(%22Ana%22, 3.0)%0A%09moto2 = Moto(motorista2)%0A%0A%09print(%22--- Exemplo 2: passageiro com pouco dinheiro ---%22)%0A%09moto2.embarcar(passageiro2)%0A%09moto2.rodar(10)  # 10 km -%3E R$ 10%0A%09moto2.desembarcar(\n )\n",
            "lines": "104"
        },
        {
            "label": "2025-10-27_23-25-59",
            "content": "@@ -1,12 +1,58 @@\n+from sklearn.cluster import kmeans_plusplus%0A%0A%0A\n class Pessoa\n@@ -78,34 +78,8 @@\n self\n-, nome: str, dinheiro: int\n ):%0A \n@@ -100,15 +100,18 @@\n nome\n- = nome\n+: str = %22%22\n %0A   \n@@ -134,20 +134,21 @@\n eiro\n- = dinheiro%0A\n+: float = 0.0\n %0A   \n@@ -184,16 +184,22 @@\n eturn f%22\n+Nome: \n %7Bself.__\n@@ -203,17 +203,31 @@\n .__nome%7D\n-:\n+, Dinheiro: R$ \n %7Bself.__\n@@ -234,20 +234,23 @@\n dinheiro\n+:.2f\n %7D%22%0A\n-%0A\n     def \n@@ -291,17 +291,16 @@\n .__nome%0A\n-%0A\n     def \n@@ -349,17 +349,16 @@\n inheiro%0A\n-%0A\n     def \n@@ -378,18 +378,19 @@\n elf,\n- \n valor: \n-in\n+floa\n t):%0A\n@@ -421,18 +421,16 @@\n = valor%0A\n-%0A%0A\n class Mo\n@@ -511,31 +511,24 @@\n sta: Pessoa \n-%7C None \n = None%0A     \n@@ -560,23 +560,15 @@\n soa \n-%7C None \n = None%0A\n-%0A\n     \n@@ -582,25 +582,24 @@\n Driver(self,\n- \n nome: str, d\n@@ -607,18 +607,20 @@\n nheiro: \n-in\n+floa\n t):%0A    \n@@ -665,17 +665,16 @@\n nheiro)%0A\n-%0A\n     def \n@@ -686,17 +686,16 @@\n ss(self,\n- \n nome: st\n@@ -711,20 +711,14 @@\n ro: \n-int) -%3E bool\n+float)\n :%0A  \n@@ -776,17 +776,16 @@\n t(%22fail:\n- \n no drive\n@@ -892,45 +892,8 @@\n  = 0\n-  # Reseta custo ao entrar passageiro\n %0A   \n@@ -909,17 +909,16 @@\n rn True%0A\n-%0A\n     def \n@@ -933,14 +933,23 @@\n lf, \n-km: in\n+distancia: floa\n t):%0A\n@@ -1002,33 +1002,32 @@\n     print(%22fail:\n- \n no passenger%22)%0A \n@@ -1072,11 +1072,17 @@\n  += \n-km%0A\n+distancia\n %0A   \n@@ -1165,17 +1165,16 @@\n t(%22fail:\n- \n no passe\n@@ -1269,149 +1269,8 @@\n ())%0A\n-        if paga %3C self.__custo:  # Adicionado: verifica se n%C3%A3o pagou o total%0A            print(%22fail: Passenger does not have enough money%22)%0A\n     \n@@ -1417,55 +1417,13 @@\n ) + \n-self.__custo)  # Motorista recebe o custo total\n+paga)\n %0A   \n@@ -1537,17 +1537,16 @@\n sto = 0%0A\n-%0A\n     def \n@@ -1574,29 +1574,27 @@\n   driver\n- = %22None%22 if \n+_str = str(\n self.__m\n@@ -1605,74 +1605,70 @@\n ista\n+)\n  i\n-s None else str(self.__motorista)%0A        passenger = %22None%22 if \n+f self.__motorista else %22No driver%22%0A        pass_str = str(\n self\n@@ -1684,26 +1684,13 @@\n eiro\n+)\n  i\n-s None else str(\n+f \n self\n@@ -1706,49 +1706,46 @@\n eiro\n-)%0A        return f%22Cost: %7Bself.__custo%7D, \n+ else %22No passenger%22%0A        return f%22\n Driv\n@@ -1755,19 +1755,23 @@\n  %7Bdriver\n-%7D, \n+_str%7D%5Cn\n Passenge\n@@ -1782,17 +1782,36 @@\n pass\n-enger%7D%22%0A%0A\n+_str%7D%5CnCost: %7Bself.__custo%7D%22\n %0Adef\n@@ -1837,17 +1837,16 @@\n  Moto()%0A\n-%0A\n     whil\n@@ -1889,36 +1889,11 @@\n    p\n-rint(%22$%22 + line)%0A        \n ar\n-g\n+t\n s = \n@@ -1907,13 +1907,9 @@\n lit(\n-%22 %22)%0A\n+)\n %0A   \n@@ -1917,76 +1917,45 @@\n     \n-if arg\n+cmd = part\n s%5B0%5D\n- == %22end%22:%0A            break%0A        elif args%5B0%5D\n+%0A        if cmd\n  == %22\n-show\n+end\n %22:%0A \n@@ -1969,19 +1969,13 @@\n     \n-print(moto)\n+break\n %0A   \n@@ -1988,29 +1988,20 @@\n lif \n-args%5B0%5D == %22setDriver\n+cmd == %22init\n %22:%0A \n@@ -2010,35 +2010,36 @@\n          nome = \n+p\n ar\n-g\n+t\n s%5B1%5D%0A           \n@@ -2042,39 +2042,42 @@\n      dinheiro = \n-in\n+floa\n t(\n+p\n ar\n-g\n+t\n s%5B2%5D)%0A          \n@@ -2126,27 +2126,70 @@\n lif \n-args%5B0%5D == %22setPass\n+cmd == %22show%22:%0A            print(moto)%0A        elif cmd == %22in\n %22:%0A \n@@ -2206,19 +2206,20 @@\n  nome = \n+p\n ar\n-g\n+t\n s%5B1%5D%0A   \n@@ -2238,23 +2238,26 @@\n heiro = \n-in\n+floa\n t(\n+p\n ar\n-g\n+t\n s%5B2%5D)%0A  \n@@ -2304,31 +2304,27 @@\n        elif \n-args%5B0%5D\n+cmd\n  == %22drive%22:\n@@ -2340,20 +2340,30 @@\n     \n-km = in\n+distancia = floa\n t(\n+p\n ar\n-g\n+t\n s%5B1%5D\n@@ -2387,18 +2387,25 @@\n o.drive(\n-km\n+distancia\n )%0A      \n@@ -2415,29 +2415,19 @@\n lif \n-args%5B0%5D == %22leavePass\n+cmd == %22out\n %22:%0A \n@@ -2458,13 +2458,61 @@\n s()%0A\n-%0A%0Amain()%0A\n+        else:%0A            print(%22fail: comando invalido%22)\n",
            "lines": "73"
        },
        {
            "label": "2025-10-27_23-28-06",
            "content": "@@ -1308,20 +1308,28 @@\n   # \n-Imprime fail\n+Adicionado: verifica\n  se \n@@ -1657,92 +1657,19 @@\n )%7D:%7B\n-self.__passageiro.getDinheiro()%7D left%22)  # Imprime dinheiro restante (ap%C3%B3s subtra%C3%A7%C3%A3o\n+paga%7D left%22\n )%0A  \n",
            "lines": "88"
        },
        {
            "label": "2025-10-27_23-30-29",
            "content": "class Pessoa:\n    def __init__(self, nome: str, dinheiro: int):\n        self.__nome = nome\n        self.__dinheiro = dinheiro\n\n    def __str__(self):\n        return f\"{self.__nome}:{self.__dinheiro}\"\n\n    def getNome(self):\n        return self.__nome\n\n    def getDinheiro(self):\n        return self.__dinheiro\n\n    def setDinheiro(self, valor: int):\n        self.__dinheiro = valor\n\n\nclass Moto:\n    def __init__(self):\n        self.__custo = 0\n        self.__motorista: Pessoa | None = None\n        self.__passageiro: Pessoa | None = None\n\n    def setDriver(self, nome: str, dinheiro: int):\n        self.__motorista = Pessoa(nome, dinheiro)\n\n    def setPass(self, nome: str, dinheiro: int) -> bool:\n        if self.__motorista is None:\n            print(\"fail: no driver\")\n            return False\n        self.__passageiro = Pessoa(nome, dinheiro)\n        self.__custo = 0  # Reseta custo ao entrar passageiro\n        return True\n\n    def drive(self, km: int):\n        if self.__passageiro is None:\n            print(\"fail: no passenger\")\n            return\n        self.__custo += km\n\n    def leavePass(self):\n        if self.__passageiro is None:\n            print(\"fail: no passenger\")\n            return\n        paga = min(self.__custo, self.__passageiro.getDinheiro())\n        if paga < self.__custo:  # Imprime fail se n\u00e3o pagou o total\n            print(\"fail: Passenger does not have enough money\")\n        self.__passageiro.setDinheiro(self.__passageiro.getDinheiro() - paga)\n        self.__motorista.setDinheiro(self.__motorista.getDinheiro() + self.__custo)  # Motorista recebe o custo total\n        print(f\"{self.__passageiro.getNome()}:{self.__passageiro.getDinheiro()} left\")  # Imprime dinheiro restante (ap\u00f3s subtra\u00e7\u00e3o)\n        self.__passageiro = None\n        self.__custo = 0\n\n    def __str__(self):\n        driver = \"None\" if self.__motorista is None else str(self.__motorista)\n        passenger = \"None\" if self.__passageiro is None else str(self.__passageiro)\n        return f\"Cost: {self.__custo}, Driver: {driver}, Passenger: {passenger}\"\n\n\ndef main():\n    moto = Moto()\n\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"show\":\n            print(moto)\n        elif args[0] == \"setDriver\":\n            nome = args[1]\n            dinheiro = int(args[2])\n            moto.setDriver(nome, dinheiro)\n        elif args[0] == \"setPass\":\n            nome = args[1]\n            dinheiro = int(args[2])\n            moto.setPass(nome, dinheiro)\n        elif args[0] == \"drive\":\n            km = int(args[1])\n            moto.drive(km)\n        elif args[0] == \"leavePass\":\n            moto.leavePass()\n\n\nmain()\n",
            "lines": "88"
        }
    ]
}