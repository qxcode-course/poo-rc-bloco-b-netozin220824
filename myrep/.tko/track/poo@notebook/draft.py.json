{
    "patches": [
        {
            "label": "2025-10-28_03-06-05",
            "content": "@@ -1333,1719 +1333,4 @@\n o%22)%0A\n-    def mostrar(self):%0A        status = %22ligado%22 if self.__ligado else %22desligado%22%0A        bateria_str = %22nenhuma%22 if self.__bateria is None else f%22%7Bself.__bateria.getCarga()%7D/%7Bself.__bateria.getCapacidade()%7D%22%0A        carregador_str = %22nenhum%22 if self.__carregador is None else f%22%7Bself.__carregador.getPotencia()%7DW%22%0A        print(f%22status: %7Bstatus%7D, bateria: %7Bbateria_str%7D, carregador: %7Bcarregador_str%7D%22)%0A    def usar(self,tempo: int):%0A        if not self.__ligado:%0A            print(%22notebook desligado%22)%0A            return%0A        if self.__bateria is None and self.__carregador is None:%0A            print(%22erro: sem bateria ou carregador%22)%0A            return%0A        if self.__bateria is not None and self.__carregador is not None:%0A            carga_adicionada = tempo * self.__carregador.getPotencia()%0A            nova_carga = self.__bateria.getCarga() + carga_adicionada%0A            self.__bateria.setCarga(nova_carga)%0A            print(%22Notebook utilizado com sucesso.%22)%0A        elif self.__bateria is not None:%0A            carga_atual = self.__bateria.getCarga()%0A            tempo_usado = min(tempo, carga_atual)%0A            self.__bateria.setCarga(carga_atual - tempo_usado)%0A            if tempo_usado %3C tempo:%0A                print(%22notebook descarregou%22)%0A                self.desligar()%0A        else:%0A            print(%22Notebook utilizado com sucesso%22)%0A    def setBateria(self,bateria: Baterria):%0A        self.__bateria = bateria%0A    def rmBateria(self) -%3E Baterria %7C None:%0A        if self.__bateria is None:%0A            print(%22nenhuma bateria para remover%22)%0A            return None%0A        removida = self.__bateria%0A        self.__bateria = None%0A        print(%22bateria removida%22)%0A        return removida%0A\n",
            "lines": "39"
        },
        {
            "label": "2025-10-28_03-21-47",
            "content": "@@ -3048,394 +3048,4 @@\n ida%0A\n-    def setCarregador(self,carregador: Carregador):%0A        self.__carregador = carregador%0A    def rmCarregador(self) -%3E Carregador %7C None:%0A        if self.__carregador is None:%0A            print(%22nenhum carregador para remover%22)%0A            return None%0A        removido = self.__carregador%0A        self.__carregador = None%0A        print(%22carregador removido%22)%0A        return removido%0A    %0A\n",
            "lines": "75"
        },
        {
            "label": "2025-10-28_03-23-09",
            "content": "@@ -3429,9 +3429,13 @@\n emovido%0A\n+    \n %0A\n",
            "lines": "86"
        },
        {
            "label": "2025-10-28_03-25-43",
            "content": "class Baterria:\n    def __init__(self,capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n    def getCapacidade(self) -> int:\n        return self.__capacidade\n    def getCarga(self) -> int:\n        return self.__carga\n    def setCarga(self,carga: int):\n        self.__carga = carga\n    def mostrar(self) -> str:\n        print(f\"{self.__carga}/{self.__capacidade}\")\nclass Carregador:\n    def __init__(self,potencia: int):\n        self.__potencia = potencia\n    def getPotencia(self) -> int:\n        return self.__potencia\n    def mostrar(self) -> str:\n        print(f\"potencia: {self.__potencia}W\")\nclass Notebook:\n    def __init__(self):\n        self.__ligado: bool = False\n        self.__bateria: Baterria | None = None\n        self.__carregador: Carregador | None = None\n    def ligar(self):\n        if self.__ligado:\n            print(\"notebook ja esta ligado\")\n            return\n        if (self.__bateria is None or self.__bateria.getCarga() <=0) and self.__carregador is None:\n            print(\"n\u00e3o foi poss\u00edvel ligar \")\n            return\n        self.__ligado = True\n        print(\"notebook ligado\")\n    def desligar(self):\n        if not self.__ligado:\n            print(\"notebook ja esta desligado\")\n            return\n        self.__ligado = False\n        print(\"notebook desligado\")\n    def mostrar(self):\n        status = \"ligado\" if self.__ligado else \"desligado\"\n        bateria_str = \"nenhuma\" if self.__bateria is None else f\"{self.__bateria.getCarga()}/{self.__bateria.getCapacidade()}\"\n        carregador_str = \"nenhum\" if self.__carregador is None else f\"{self.__carregador.getPotencia()}W\"\n        print(f\"status: {status}, bateria: {bateria_str}, carregador: {carregador_str}\")\n    def usar(self,tempo: int):\n        if not self.__ligado:\n            print(\"notebook desligado\")\n            return\n        if self.__bateria is None and self.__carregador is None:\n            print(\"erro: sem bateria ou carregador\")\n            return\n        if self.__bateria is not None and self.__carregador is not None:\n            carga_adicionada = tempo * self.__carregador.getPotencia()\n            nova_carga = self.__bateria.getCarga() + carga_adicionada\n            self.__bateria.setCarga(nova_carga)\n            print(\"Notebook utilizado com sucesso.\")\n        elif self.__bateria is not None:\n            carga_atual = self.__bateria.getCarga()\n            tempo_usado = min(tempo, carga_atual)\n            self.__bateria.setCarga(carga_atual - tempo_usado)\n            if tempo_usado < tempo:\n                print(\"notebook descarregou\")\n                self.desligar()\n        else:\n            print(\"Notebook utilizado com sucesso\")\n    def setBateria(self,bateria: Baterria):\n        self.__bateria = bateria\n    def rmBateria(self) -> Baterria | None:\n        if self.__bateria is None:\n            print(\"nenhuma bateria para remover\")\n            return None\n        removida = self.__bateria\n        self.__bateria = None\n        print(\"bateria removida\")\n        return removida\n    def setCarregador(self,carregador: Carregador):\n        self.__carregador = carregador\n    def rmCarregador(self) -> Carregador | None:\n        if self.__carregador is None:\n            print(\"nenhum carregador para remover\")\n            return None\n        removido = self.__carregador\n        self.__carregador = None\n        print(\"carregador removido\")\n        return removido\n\n",
            "lines": "86"
        }
    ]
}