{
    "patches": [
        {
            "label": "2025-10-28_04-20-51",
            "content": "@@ -1,12 +1,40 @@\n+from traitlets import Int%0A%0A%0A\n class Tamago\n@@ -68,32 +68,45 @@\n ,energyMax: int,\n+ funMax: int,\n  cleanMax: int):\n@@ -111,32 +111,34 @@\n ):%0A        self.\n+__\n energy = energyM\n@@ -145,32 +145,62 @@\n ax%0A        self.\n+__fun = funMax%0A        self.__\n clean = cleanMax\n@@ -209,24 +209,26 @@\n        self.\n+__\n energyMax = \n@@ -254,15 +254,25 @@\n elf.\n-age = 0\n+__funMax = funMax\n %0A   \n@@ -277,24 +277,26 @@\n        self.\n+__\n cleanMax = c\n@@ -350,24 +350,26 @@\n        self.\n+__\n energy = max\n@@ -385,24 +385,26 @@\n nergy, self.\n+__\n energyMax))%0A\n@@ -415,24 +415,26 @@\n     if self.\n+__\n energy == 0:\n@@ -510,24 +510,26 @@\n        self.\n+__\n clean = max(\n@@ -543,24 +543,26 @@\n clean, self.\n+__\n cleanMax))%0A \n@@ -572,24 +572,26 @@\n     if self.\n+__\n clean == 0:%0A\n@@ -631,25 +631,24 @@\n   def getEne\n-r\n gy(self) -%3E \n@@ -668,24 +668,26 @@\n return self.\n+__\n energy%0A    d\n@@ -728,24 +728,26 @@\n return self.\n+__\n clean%0A    de\n@@ -789,16 +789,18 @@\n rn self.\n+__\n age%0A    \n@@ -899,24 +899,26 @@\n n f%22E:%7Bself.\n+__\n energy%7D/%7Bsel\n@@ -919,16 +919,18 @@\n %7D/%7Bself.\n+__\n energyMa\n@@ -937,24 +937,26 @@\n x%7D, C:%7Bself.\n+__\n clean%7D/%7Bself\n@@ -956,16 +956,18 @@\n %7D/%7Bself.\n+__\n cleanMax\n@@ -1068,25 +1068,25 @@\n ,energyMax: \n-i\n+I\n nt, cleanMax\n@@ -1229,1711 +1229,4 @@\n play\n-(self):%0A        if not self.pet or not self.pet.isAlive():%0A            print(%22fail: pet esta morto%22)%0A            return%0A        self.pet.setEnergy(self.pet.getEnergy() - 2)%0A        self.pet.setClean(self.pet.getClean() - 3)%0A        self.pet.age += 1%0A        if not self.pet.isAlive():%0A            if self.pet.getEnergy() == 0:%0A                print(%22fail: pet morreu de fraqueza%22)%0A            else:%0A                print(%22fail: pet morreu de sujeira%22)%0A    def shower(self):%0A        if not self.pet or not self.pet.isAlive():%0A            print(%22fail: pet esta morto%22)%0A            return%0A        self.pet.setEnergy(self.pet.getEnergy() - 3)%0A        self.pet.setClean(self.pet.cleanMax)%0A        self.pet.age += 2%0A        if not self.pet.isAlive():%0A            print(%22fail: pet morreu de fraqueza%22)%0A    def sleep(self):%0A        if not self.pet or not self.pet.isAlive():%0A            print(%22fail: pet esta morto%22)%0A            return%0A        if self.pet.getEnergy() %3E self.pet.energyMax - 5:%0A            print(%22fail: nao esta com sono%22)%0A            return%0A        turnos = (self.pet.energyMax - self.pet.getEnergy()) // 5%0A        self.pet.setEnergy(self.pet.energyMax)%0A        self.pet.age += turnos%0Adef main():%0A    game = Game()%0A    while True:%0A        line = input()%0A        args = line.split()%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22init%22:%0A            game.init(int(args%5B1%5D), int(args%5B2%5D))%0A        elif args%5B0%5D == %22show%22:%0A            game.show()%0A        elif args%5B0%5D == %22play%22:%0A            game.play()%0A        elif args%5B0%5D == %22shower%22:%0A            game.shower()%0A        elif args%5B0%5D == %22sleep%22:%0A            game.sleep()%0A        else:%0A            print(%22fail: comando invalido%22)\n",
            "lines": "38"
        },
        {
            "label": "2025-10-28_04-32-02",
            "content": "@@ -2379,42 +2379,8 @@\n ut()\n-.strip()%0A        print(%22$%22 + line)\n %0A   \n@@ -2419,75 +2419,15 @@\n  if \n-not args:%0A            continue%0A        cmd = args%5B0%5D%0A        if cmd\n+args%5B0%5D\n  == \n@@ -2460,27 +2460,31 @@\n        elif \n-cmd\n+args%5B0%5D\n  == %22init%22:%0A\n@@ -2499,110 +2499,44 @@\n     \n-energyMax = int(args%5B1%5D)%0A            cleanMax = int(args%5B2%5D)%0A            game.init(energyMax, cleanMax\n+game.init(int(args%5B1%5D), int(args%5B2%5D)\n )%0A  \n@@ -2538,35 +2538,39 @@\n ))%0A        elif \n-cmd\n+args%5B0%5D\n  == %22show%22:%0A    \n@@ -2598,27 +2598,31 @@\n        elif \n-cmd\n+args%5B0%5D\n  == %22play%22:%0A\n@@ -2654,27 +2654,31 @@\n        elif \n-cmd\n+args%5B0%5D\n  == %22shower%22\n@@ -2722,11 +2722,15 @@\n lif \n-cmd\n+args%5B0%5D\n  == \n@@ -2767,41 +2767,61 @@\n p()%0A\n-if __name__ == %22__main__%22:%0A    main(\n+        else:%0A            print(%22fail: comando invalido%22\n )\n",
            "lines": "83"
        },
        {
            "label": "2025-10-28_04-32-57",
            "content": "@@ -29,25 +29,24 @@\n init__(self,\n- \n energyMax: i\n@@ -84,19 +84,16 @@\n f.energy\n-Max\n  = energ\n@@ -115,19 +115,16 @@\n lf.clean\n-Max\n  = clean\n@@ -138,32 +138,35 @@\n      self.energy\n+Max\n  = energyMax%0A   \n@@ -166,38 +166,8 @@\n Max%0A\n-        self.clean = cleanMax%0A\n     \n@@ -200,21 +200,27 @@\n elf.\n-alive = True%0A\n+cleanMax = cleanMax\n %0A   \n@@ -236,29 +236,30 @@\n nergy(self, \n-value\n+energy\n : int):%0A    \n@@ -283,29 +283,30 @@\n  max(0, min(\n-value\n+energy\n , self.energ\n@@ -364,33 +364,32 @@\n f.alive = False%0A\n-%0A\n     def setClean\n@@ -395,21 +395,21 @@\n n(self, \n-value\n+clean\n : int):%0A\n@@ -444,13 +444,13 @@\n min(\n-value\n+clean\n , se\n@@ -522,17 +522,16 @@\n = False%0A\n-%0A\n     def \n@@ -581,17 +581,16 @@\n .energy%0A\n-%0A\n     def \n@@ -638,17 +638,16 @@\n f.clean%0A\n-%0A\n     def \n@@ -691,17 +691,16 @@\n elf.age%0A\n-%0A\n     def \n@@ -746,14 +746,16 @@\n elf.\n-alive%0A\n+getAge()\n %0A   \n@@ -829,9 +829,9 @@\n x%7D, \n-L\n+C\n :%7Bse\n@@ -871,17 +871,16 @@\n f.age%7D%22%0A\n-%0A\n class Ga\n@@ -931,17 +931,16 @@\n  = None%0A\n-%0A\n     def \n@@ -945,25 +945,24 @@\n f init(self,\n- \n energyMax: i\n@@ -1032,17 +1032,16 @@\n eanMax)%0A\n-%0A\n     def \n@@ -1101,17 +1101,16 @@\n lf.pet)%0A\n-%0A\n     def \n@@ -1561,25 +1561,24 @@\n e sujeira%22)%0A\n-%0A\n     def show\n@@ -1908,17 +1908,16 @@\n queza%22)%0A\n-%0A\n     def \n@@ -2180,16 +2180,17 @@\n urnos = \n+(\n self.pet\n@@ -2222,16 +2222,22 @@\n Energy()\n+) // 5\n %0A       \n@@ -2307,17 +2307,16 @@\n  turnos%0A\n-%0A\n def main\n@@ -2903,17 +2903,16 @@\n sleep()%0A\n-%0A\n if __nam\n@@ -2940,9 +2940,8 @@\n   main()\n-%0A\n",
            "lines": "89"
        },
        {
            "label": "2025-10-28_04-43-43",
            "content": "class Tamagotchi:\n    def __init__(self, energyMax: int, cleanMax: int):\n        self.energyMax = energyMax\n        self.cleanMax = cleanMax\n        self.energy = energyMax\n        self.clean = cleanMax\n        self.age = 0\n        self.alive = True\n\n    def setEnergy(self, value: int):\n        self.energy = max(0, min(value, self.energyMax))\n        if self.energy == 0:\n            self.alive = False\n\n    def setClean(self, value: int):\n        self.clean = max(0, min(value, self.cleanMax))\n        if self.clean == 0:\n            self.alive = False\n\n    def getEnergy(self) -> int:\n        return self.energy\n\n    def getClean(self) -> int:\n        return self.clean\n\n    def getAge(self) -> int:\n        return self.age\n\n    def isAlive(self) -> bool:\n        return self.alive\n\n    def __str__(self):\n        return f\"E:{self.energy}/{self.energyMax}, L:{self.clean}/{self.cleanMax}, I:{self.age}\"\n\nclass Game:\n    def __init__(self):\n        self.pet = None\n\n    def init(self, energyMax: int, cleanMax: int):\n        self.pet = Tamagotchi(energyMax, cleanMax)\n\n    def show(self):\n        if self.pet:\n            print(self.pet)\n\n    def play(self):\n        if not self.pet or not self.pet.isAlive():\n            print(\"fail: pet esta morto\")\n            return\n        self.pet.setEnergy(self.pet.getEnergy() - 2)\n        self.pet.setClean(self.pet.getClean() - 3)\n        self.pet.age += 1\n        if not self.pet.isAlive():\n            if self.pet.getEnergy() == 0:\n                print(\"fail: pet morreu de fraqueza\")\n            else:\n                print(\"fail: pet morreu de sujeira\")\n\n    def shower(self):\n        if not self.pet or not self.pet.isAlive():\n            print(\"fail: pet esta morto\")\n            return\n        self.pet.setEnergy(self.pet.getEnergy() - 3)\n        self.pet.setClean(self.pet.cleanMax)\n        self.pet.age += 2\n        if not self.pet.isAlive():\n            print(\"fail: pet morreu de fraqueza\")\n\n    def sleep(self):\n        if not self.pet or not self.pet.isAlive():\n            print(\"fail: pet esta morto\")\n            return\n        if self.pet.getEnergy() > self.pet.energyMax - 5:\n            print(\"fail: nao esta com sono\")\n            return\n        turnos = self.pet.energyMax - self.pet.getEnergy()\n        self.pet.setEnergy(self.pet.energyMax)\n        self.pet.age += turnos\n\ndef main():\n    game = Game()\n    while True:\n        line = input().strip()\n        print(\"$\" + line)\n        args = line.split()\n        if not args:\n            continue\n        cmd = args[0]\n        if cmd == \"end\":\n            break\n        elif cmd == \"init\":\n            energyMax = int(args[1])\n            cleanMax = int(args[2])\n            game.init(energyMax, cleanMax)\n        elif cmd == \"show\":\n            game.show()\n        elif cmd == \"play\":\n            game.play()\n        elif cmd == \"shower\":\n            game.shower()\n        elif cmd == \"sleep\":\n            game.sleep()\n\nif __name__ == \"__main__\":\n    main()\n",
            "lines": "105"
        }
    ]
}